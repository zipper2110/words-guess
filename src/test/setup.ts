import '@testing-library/jest-dom'
import { expect, afterEach } from 'vitest'
import { cleanup } from '@testing-library/react'
import * as matchers from '@testing-library/jest-dom/matchers'
import i18n from '../i18n';

// Extend Vitest's expect method with methods from react-testing-library
expect.extend(matchers as any)

// Cleanup after each test case (e.g. clearing jsdom)
afterEach(() => {
  cleanup()
})

// Initialize i18next for tests
i18n.init({
  resources: {
    en: {
      translation: {
        // Add minimal translations needed for tests
        level: 'Level',
        score: 'Score',
        progress: 'Progress',
        wordHints: 'Word Hints',
        bonusWords: 'Bonus Words',
        noBonusWords: 'No bonus words found yet',
        showDefinitions: 'Show Definitions',
        typeGuess: 'Type your guess...',
        levelCompletePlaceholder: 'Level Complete!',
        submit: 'Submit',
        cancel: 'Cancel',
        save: 'Save',
        backToGame: 'Back to Game',
        adminAccess: 'Admin Access',
        password: 'Password',
        invalidPassword: 'Invalid password',
        login: 'Login',
        levelAdministration: 'Level Administration',
        validateLevels: 'Validate Levels',
        addLevel: 'Add Level',
        editLevel: 'Edit Level',
        addNewLevel: 'Add New Level',
        subWords: 'Sub Words',
        subWordsHint: 'Enter words separated by commas',
        actions: 'Actions',
        baseWord: 'Base Word',
        totalWords: 'Total Words',
        validWords: 'Valid Words',
        invalidWords: 'Invalid Words',
        duplicateWords: 'Duplicate Words',
        notRealWords: 'Not Real Words',
        wordStatusValid: 'Valid',
        wordStatusInvalid: 'Invalid',
        wordStatusDuplicate: 'Duplicate',
        wordStatusNotReal: 'Not a real word',
        levelValidation: 'Level Validation',
        english: 'üá∫üá∏ English',
        russian: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'
      }
    },
    ru: {
      translation: {
        // Add minimal translations needed for tests
        level: '–£—Ä–æ–≤–µ–Ω—å',
        score: '–°—á–µ—Ç',
        progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
        wordHints: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–ª–æ–≤',
        bonusWords: '–ë–æ–Ω—É—Å–Ω—ã–µ —Å–ª–æ–≤–∞',
        noBonusWords: '–ë–æ–Ω—É—Å–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        showDefinitions: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è',
        typeGuess: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–ª–æ–≤–æ...',
        levelCompletePlaceholder: '–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!',
        submit: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
        cancel: '–û—Ç–º–µ–Ω–∞',
        save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        backToGame: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–µ',
        adminAccess: '–î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        password: '–ü–∞—Ä–æ–ª—å',
        invalidPassword: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        login: '–í–æ–π—Ç–∏',
        levelAdministration: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏',
        validateLevels: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–Ω–∏',
        addLevel: '–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å',
        editLevel: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å',
        addNewLevel: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å',
        subWords: '–ü–æ–¥—Å–ª–æ–≤–∞',
        subWordsHint: '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
        actions: '–î–µ–π—Å—Ç–≤–∏—è',
        baseWord: '–ë–∞–∑–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        totalWords: '–í—Å–µ–≥–æ —Å–ª–æ–≤',
        validWords: '–í–∞–ª–∏–¥–Ω—ã–µ —Å–ª–æ–≤–∞',
        invalidWords: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª–æ–≤–∞',
        duplicateWords: '–î—É–±–ª–∏–∫–∞—Ç—ã',
        notRealWords: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞',
        wordStatusValid: '–í–∞–ª–∏–¥–Ω–æ–µ',
        wordStatusInvalid: '–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ',
        wordStatusDuplicate: '–î—É–±–ª–∏–∫–∞—Ç',
        wordStatusNotReal: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ',
        levelValidation: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è',
        english: 'üá∫üá∏ English',
        russian: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'
      }
    }
  },
  fallbackLng: 'en',
  interpolation: {
    escapeValue: false,
  },
  detection: {
    order: ['localStorage', 'navigator', 'htmlTag', 'cookie', 'path'],
    caches: ['localStorage', 'cookie'],
    lookupLocalStorage: 'i18nextLng',
    lookupCookie: 'i18nextLng',
  }
}); 